openapi: 3.0.0
info:
  title: Marketplace API
  description: API for managing marketplace categories
  version: 1.0.0
servers:
  - url: http://0.0.0.0:8081
    description: Local development server
paths:
  /categories:
    post:
      tags:
        - Categories
      summary: Create a new category
      description: Creates a new category in the marketplace with the given attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '409':
          description: Conflict - Category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

    get:
      tags:
        - Categories
      summary: List categories
      description: Retrieves a list of categories with optional filtering and pagination
      parameters:
        - name: category_name
          in: query
          description: Filter by category name
          schema:
            type: string
            example: Электроника
        - name: language
          in: query
          description: Filter by language
          schema:
            type: string
            enum: [ tj, ru, en ]
            example: ru
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            example: 10
        - name: sort
          in: query
          description: Sorting field and direction (e.g., 'category_name:asc')
          schema:
            type: string
            example: category_name:asc
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResponse'
                  metadata:
                    $ref: '#/components/schemas/Metadata'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'


  /categories/:id:
    get:
      tags:
        - Categories
      summary: Get a category
      description: Gets a category with the provided category_id
      parameters:
        - name: id
          in: path
          description: ID of the category to update
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Get category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

        '400':
          description: Invalid type of id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCategoryBindResponse'

        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrCategoryNotFound"

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    patch:
      tags:
        - Categories
      summary: Update a category
      description: Updates an existing category with the provided category_id
      parameters:
        - name: id
          in: path
          description: ID of the category to update
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCategoryNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    delete:
      tags:
        - Categories
      summary: Delete a category
      description: Deletes a category with the provided category_id
      parameters:
        - name: id
          in: path
          description: ID of the category to delete
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: category was successfully deleted
        '400':
          description: Invalid type of id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCategoryBindResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrCategoryNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

components:
  schemas:
    CreateCategoryRequest:
      type: object
      required:
        - category_name
        - language
      properties:
        category_name:
          type: string
          description: Name of the category
          example: Электроника
          maxLength: 50
        parent_id:
          type: integer
          nullable: true
          description: ID of the parent category (if any)
          example: 1
        language:
          type: string
          description: Language of the category
          enum: [ tj, ru, en ]
          example: ru
        attribute_schema:
          type: object
          description: JSON schema for category attributes
          example: {
            "type": "object",
            "title": "Электроника",
            "description": "Атрибуты для категории электроники",
            "required": [ "гарантия", "бренд" ],
            "properties": {
              "гарантия": {
                "type": "integer",
                "description": "Срок гарантии в месяцах",
                "minimum": 0,
                "maximum": 60
              },
              "бренд": {
                "type": "string",
                "enum": [ "Samsung", "Apple", "Xiaomi", "Другое" ]
              }
            }
          }
    
    CategoryResponse:
      type: object
      properties:
        category:
          type: object
          properties:
            category_id:
              type: integer
              description: Auto-generated ID of the category
              example: 1
            category_name:
              type: string
              example: Электроника
            parent_id:
              type: integer
              nullable: true
              example: null
            language:
              type: string
              example: ru
            attribute_schema:
              type: object
              example: {
                "type": "object",
                "title": "Электроника",
                "description": "Атрибуты для категории электроники",
                "required": [ "гарантия", "бренд" ],
                "properties": {
                  "гарантия": {
                    "type": "integer",
                    "description": "Срок гарантии в месяцах",
                    "minimum": 0,
                    "maximum": 60
                  },
                  "бренд": {
                    "type": "string",
                    "enum": [ "Samsung", "Apple", "Xiaomi", "Другое" ]
                  }
                }
              }
    
    BadRequestResponse:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 400
            code:
              type: string
              example: BAD_REQUEST
            error:
              type: string
              example: validation failed
            details:
              type: string
              example: Something is missing or was not sent correctly

    ConflictResponse:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 409
            code:
              type: string
              example: CONFLICT
            error:
              type: string
              example: category already exists
            details:
              type: string
              example: Category with this name, parent, and language already exists
    
    InternalServerErrorResponse:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 500
            code:
              type: string
              example: INTERNAL_SERVER_ERROR
            error:
              type: string
              example: any unexpected error
            details:
              type: string
              example: internal server error

    ServiceUnavailableResponse:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 503
            code:
              type: string
              example: SERVICE_UNAVAILABLE
            error:
              type: string
              example: database connection failed
            details:
              type: string
              example: Database connection failed

    ErrCategoryBindResponse:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 400
            code:
              type: string
              example: BAD_REQUEST
            error:
              type: string
              example: invalid category id was sent
            details:
              type: string
              example: Provide correct category id

    ErrCategoryNotFound:
      type: object
      properties:
        error-response:
          type: object
          properties:
            status:
              type: integer
              example: 404
            code:
              type: string
              example: NOT_FOUND
            error:
              type: string
              example: category not found
            details:
              type: string
              example: Category you are seeking does not exist

    UpdateCategoryRequest:
      type: object
      properties:
        category_name:
          type: string
          description: Name of the category to update
          example: Электроника
          maxLength: 50
        parent_id:
          type: integer
          nullable: true
          description: ID of the parent category (if any)
          example: 1
        language:
          type: string
          description: Language of the category
          enum: [ tj, ru, en ]
          example: ru
        attribute_schema:
          type: object
          description: JSON schema for category attributes
          example: {
            "type": "object",
            "title": "Электроника",
            "description": "Атрибуты для категории электроники",
            "required": [ "гарантия", "бренд" ],
            "properties": {
              "гарантия": {
                "type": "integer",
                "description": "Срок гарантии в месяцах",
                "minimum": 0,
                "maximum": 60
              },
              "бренд": {
                "type": "string",
                "enum": [ "Samsung", "Apple", "Xiaomi", "Другое" ]
              }
            }
          }

    Metadata:
      type: object
      properties:
        current_page:
          type: integer
          description: Current page number
          example: 1
        page_size:
          type: integer
          description: Number of items per page
          example: 10
        first_page:
          type: integer
          description: First page number
          example: 1
        last_page:
          type: integer
          description: Last page number
          example: 5
        total_records:
          type: integer
          description: Total number of records
          example: 50