-- UP Migration
-- Enabling citext extension
CREATE EXTENSION IF NOT EXISTS citext;

-- Creating categories table
CREATE TABLE "categories"
(
    "category_id"      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "category_name"    varchar NOT NULL,
    "parent_id"        integer,
    "attribute_schema" jsonb     DEFAULT '{}',
    "created_at"       timestamp DEFAULT now(),
    "active"           bool      DEFAULT true,
    "updated_at"       timestamp DEFAULT now(),
    "deleted_at"       timestamp
);

-- Creating products table
CREATE TABLE "products"
(
    "product_id"          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "product_name"        citext  NOT NULL,
    "product_description" text,
    "price"               decimal(12, 2) CHECK (price >= 0),
    "currency"            varchar(3) DEFAULT 'TJS',
    "category_id"         integer NOT NULL,
    "user_id"             integer NOT NULL,
    "attributes"          jsonb      DEFAULT '{}',
    "created_at"          timestamp  DEFAULT now(),
    "active"              bool       DEFAULT true,
    "updated_at"          timestamp  DEFAULT now(),
    "deleted_at"          timestamp
);

-- Creating product_variants table
CREATE TABLE "product_variants"
(
    "variant_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "product_id" integer             NOT NULL,
    "sku"        varchar(100) UNIQUE NOT NULL,
    "price"      decimal(12, 2)      NOT NULL CHECK (price >= 0),
    "currency"   varchar(3) DEFAULT 'TJS',
    "attributes" jsonb      DEFAULT '{}',
    "stock"      integer    DEFAULT 0 CHECK (stock >= 0),
    "created_at" timestamp  DEFAULT now(),
    "active"     bool       DEFAULT true,
    "updated_at" timestamp  DEFAULT now(),
    "deleted_at" timestamp
);

-- Creating price_history table
CREATE TABLE price_history
(
    price_history_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id       integer,
    variant_id       integer,
    price            decimal(12, 2) NOT NULL CHECK (price >= 0),
    currency         varchar(3) DEFAULT 'TJS',
    created_at       timestamp  DEFAULT now(),
    FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE,
    FOREIGN KEY (variant_id) REFERENCES product_variants (variant_id) ON DELETE CASCADE
);

-- Creating discounts table
CREATE TABLE discounts
(
    discount_id      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id       integer,
    variant_id       integer,
    category_id      integer,
    discount_percent decimal(5, 2) CHECK (discount_percent >= 0 AND discount_percent <= 100),
    start_date       timestamp,
    end_date         timestamp,
    created_at       timestamp DEFAULT now(),
    active           bool      DEFAULT true,
    FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE SET NULL,
    FOREIGN KEY (variant_id) REFERENCES product_variants (variant_id) ON DELETE SET NULL,
    FOREIGN KEY (category_id) REFERENCES categories (category_id) ON DELETE SET NULL
);

-- Creating product_images table
CREATE TABLE product_images
(
    image_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id integer,
    variant_id integer,
    image_url  varchar NOT NULL,
    is_primary bool      DEFAULT false,
    created_at timestamp DEFAULT now(),
    active     bool      DEFAULT true,
    FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE,
    FOREIGN KEY (variant_id) REFERENCES product_variants (variant_id) ON DELETE CASCADE
);

-- Adding foreign key constraints
ALTER TABLE "categories"
    ADD FOREIGN KEY ("parent_id") REFERENCES "categories" ("category_id") ON DELETE SET NULL;
ALTER TABLE "products"
    ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("category_id") ON DELETE RESTRICT;
ALTER TABLE "product_variants"
    ADD FOREIGN KEY ("product_id") REFERENCES "products" ("product_id") ON DELETE CASCADE;

-- Creating update_timestamp function
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
RETURN NEW;
END;
$$ language 'plpgsql';

-- Creating triggers for updated_at
CREATE TRIGGER update_categories_timestamp
    BEFORE UPDATE
    ON categories
    FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_products_timestamp
    BEFORE UPDATE
    ON products
    FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_product_variants_timestamp
    BEFORE UPDATE
    ON product_variants
    FOR EACH ROW EXECUTE FUNCTION update_timestamp();

-- Creating indexes
CREATE INDEX idx_products_product_name ON products (product_name);
CREATE INDEX idx_products_deleted_at ON products (deleted_at) WHERE deleted_at IS NULL;
CREATE INDEX idx_categories_deleted_at ON categories (deleted_at) WHERE deleted_at IS NULL;
CREATE INDEX idx_product_variants_deleted_at ON product_variants (deleted_at) WHERE deleted_at IS NULL;
CREATE INDEX idx_products_active ON products (active);
CREATE UNIQUE INDEX idx_categories_name_parent ON categories (category_name, parent_id) WHERE deleted_at IS NULL;
CREATE INDEX idx_product_variants_product_id ON product_variants (product_id);
CREATE INDEX idx_product_variants_attributes ON product_variants USING GIN (attributes);
CREATE INDEX idx_products_category_id ON products (category_id);
CREATE INDEX idx_products_user_id ON products (user_id);
CREATE INDEX idx_product_variants_stock ON product_variants (stock);

-- Adding comments
COMMENT ON TABLE categories IS 'Таблица для хранения категорий товаров';
COMMENT ON TABLE products IS 'Таблица для хранения информации о товарах маркетплейса';
COMMENT ON TABLE product_variants IS 'Таблица для хранения вариантов товаров (например, размеры, цвета)';